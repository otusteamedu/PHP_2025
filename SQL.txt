#Создание БД и таблиц

CREATE DATABASE Сinema;

USE Сinema;

CREATE TABLE halls (
    id INT PRIMARY KEY AUTO_INCREMENT,
    number_rows INT NOT NULL,
    number_seats INT NOT NULL,
    created_at TIMESTAMP,
    updated_at TIMESTAMP
);

CREATE TABLE films (
    id INT PRIMARY KEY AUTO_INCREMENT,
    title VARCHAR(255) NOT NULL,
    duration INT NOT NULL,
    rating DECIMAL(10,1),
    created_at TIMESTAMP,
    updated_at TIMESTAMP
);

CREATE TABLE reviews (
    id INT PRIMARY KEY AUTO_INCREMENT,
    film_id INT,
    grade INT NOT NULL,
    text TEXT,
    FOREIGN KEY (film_id) REFERENCES films(id) ON DELETE CASCADE,
    created_at TIMESTAMP,
    updated_at TIMESTAMP
);

CREATE TABLE sessions (
    id INT PRIMARY KEY AUTO_INCREMENT,
    hall_id INT,
    film_id INT,
    start_time DATETIME NOT NULL,
    min_price DECIMAL(10, 2) NOT NULL,
    max_price DECIMAL(10, 2) NOT NULL,
    FOREIGN KEY (hall_id) REFERENCES halls(id) ON DELETE CASCADE,
    FOREIGN KEY (film_id) REFERENCES films(id) ON DELETE CASCADE,
    created_at TIMESTAMP,
    updated_at TIMESTAMP
);

CREATE TABLE tickets (
    id INT PRIMARY KEY AUTO_INCREMENT,
    session_id INT,
    row_number INT NOT NULL,
    seat_number INT NOT NULL,
    customer_name VARCHAR(255),
    customer_email VARCHAR(255),
    customer_phone VARCHAR(255),
    FOREIGN KEY (session_id) REFERENCES sessions(id) ON DELETE CASCADE,
    created_at TIMESTAMP,
    updated_at TIMESTAMP
);

#Запрос для нахождения самого прибыльного фильма
SELECT f.id, f.title, SUM(s.min_price) AS total_revenue
FROM films f
JOIN sessions s ON f.id = s.film_id
JOIN tickets t ON s.id = t.session_id
GROUP BY f.id
ORDER BY total_revenue DESC
LIMIT 1;