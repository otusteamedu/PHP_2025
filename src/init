#!/usr/bin/php
<?php declare(strict_types=1);

require 'vendor/autoload.php';

use Elastic\Elasticsearch\Client;
use Elastic\Elasticsearch\ClientBuilder;

$client = ClientBuilder::create()
	->setHosts(['http://elasticsearch:9200'])
	->build();

// Параметры индекса
$indexParams = [
	'index' => 'otus-shop',
	'body' => [
		'settings' => [
			'analysis' => [
				'filter' => [
					'russian_stop' => [
						'type' => 'stop',
						'stopwords' => '_russian_'
					],
					'russian_stemmer' => [
						'type' => 'stemmer',
						'language' => 'russian'
					]
				],
				'analyzer' => [
					'russian' => [
						'tokenizer' => 'standard',
						'filter' => [
							'lowercase',
							'russian_stop',
							'russian_stemmer'
						]
					]
				]
			]
		],
		'mappings' => [
			'properties' => [
				'title' => [
					'type' => 'text',
					'analyzer' => 'russian'
				],
				'sku' => [
					'type' => 'keyword'
				],
				'category' => [
					'type' => 'keyword'
				],
				'price' => [
					'type' => 'integer'
				],
				'stock' => [
					'type' => 'nested',
					'properties' => [
						'shop' => ['type' => 'keyword'],
						'stock' => ['type' => 'integer']
					]
				]
			]
		]
	]
];

// Создаем индекс
try {
	$response = $client->indices()->create($indexParams);
	echo "Индекс успешно создан\n";
} catch (Exception $e) {
	echo "Ошибка при создании индекса: ", $e->getMessage(), "\n";
	exit(1);
}

// Загружаем данные из books.json
try {
	loadData(__DIR__ . '/storage/books.json', 'otus-shop', $client);
	echo "Данные загружены!\n";
} catch (Exception $e) {
	echo "Ошибка при загрузке данных: ", $e->getMessage(), "\n";
	exit(1);
}


/**
 * @param string $filePath
 * @param string $indexName
 * @param Client $client
 * @return void
 * @throws JsonException
 * @throws Exception
 */
function loadData(string $filePath, string $indexName, Client $client): void
{
	if (file_exists($filePath)) {
		$body = [];
		$arFileLines = file($filePath, FILE_IGNORE_NEW_LINES | FILE_SKIP_EMPTY_LINES);
		foreach ($arFileLines as $line) {
			if ($json = json_decode($line, true, 512, JSON_THROW_ON_ERROR)) {
				$body[] = [
					'index' => [
						'_index' => $indexName
					]
				];
				$body[] = $json;
			} else {
				throw new JsonException('Ошибка в JSON:' . $line . PHP_EOL);
			}
		}

		if (!empty($body)) {
			try {
				$client->bulk(['body' => $body]);
			} catch (Exception $e) {
				$requestInfo = $client->getTransport()->getLastRequest();

				if (!empty($requestInfo['response']) && ($response = $requestInfo['response'])) {
					if (isset($response['error']) && ($error = $response['error']) && $error instanceof RuntimeException) {
						throw new Exception($error->getMessage());
					}

					if (!empty($response['reason'])) {
						throw new Exception($response['reason']);
					}
				} else {
					throw new Exception('Ошибка Elasticsearch: ' . $e->getMessage());
				}
			}
		}
	} else {
		throw new Exception('Файл ' . $filePath . ' не найден!');
	}
}