services:
    nginx:
      container_name: "${NGINX_CONTAINER_NAME}"
      build:
        context: ./nginx
        dockerfile: Dockerfile
      image: ${PROJ_NAME}-nginx:alpine
      ports:
        - "${NGINX_PORT}:80"
      volumes:
        # связываем хостовую папку приложения с контейнером nginx
        - ./app:/data/app
        # связываем конфигуряционные файлы контейнера nginx с хостом
        # при таком "связывании" нет необходимости пересобирать образ при изменениях конфигурации nginx
        - ./nginx/nginx.conf:/etc/nginx/nginx.conf
        - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
        # связываем файлы логов контейнера nginx с хостом
        - ./data/nginx/_logs:/var/log/nginx
        # volume с сокетом
        - phpsocket:/run/php
      depends_on:
        - php
      #   - postgres
      networks:
        otus_hw:
          ipv4_address: 172.30.0.1

    php:
      container_name: "${PHP_CONTAINER_NAME}"
      build:
        context: ./php
        dockerfile: Dockerfile
      image: ${PROJ_NAME}-php:fpm-alpine
      volumes:
        # связываем хостовую папку приложения с контейнером php
        - ./app:/data/app
        # связываем конфигуряционные файлы контейнера php с хостом
        # при таком "связывании" нет необходимости пересобирать образ при изменениях конфигурации php
        - ./php/conf/php.ini:/usr/local/etc/php/php.ini
        - ./php/conf/www.conf:/usr/local/etc/php-fpm.d/www.conf
        - ./php/conf/zz-docker.conf:/usr/local/etc/php-fpm.d/zz-docker.conf
        # связываем файлы логов контейнера php с хостом
        - ./data/php/_logs:/var/log/php
        # volume с сокетом
        - phpsocket:/run/php
      networks:
        otus_hw:
          ipv4_address: 172.30.0.2

    postgres:
      container_name: "${POSTGRES_CONTAINER_NAME}"
      build:
        context: ./postgresql
        dockerfile: Dockerfile
      image: ${PROJ_NAME}-postgres:17-alpine
      ports:
        - "${POSTGRES_PORT}:5432"
      environment:
        - POSTGRES_PASSWORD=${POSTGRES_PASSWD}
        - POSTGRES_USER=${POSTGRES_USER}
        - POSTGRES_DB=${POSTGRES_DB}
      volumes:
        - ./data/postgresql:/var/lib/postgresql/data
      networks:
        otus_hw:
          ipv4_address: 172.30.0.3

    redis:
      container_name: "${REDIS_CONTAINER_NAME}"
      build:
        context: ./redis
        dockerfile: Dockerfile
      image: ${PROJ_NAME}-redis:7.4-alpine
      ports:
        - "${REDIS_PORT}:6379"
      volumes:
        - ./data/redis:/data
      command: redis-server --requirepass ${REDIS_PASSWD}
      networks:
        otus_hw:
          ipv4_address: 172.30.0.4

    memcached:
      container_name: "${MEMCACHED_CONTAINER_NAME}"
      build:
        context: ./memcached
        dockerfile: Dockerfile
      image: ${PROJ_NAME}-memcached:alpine
      ports:
        - "${MEMCACHED_PORT}:11211"
      command:
        - --conn-limit=1024
        - --memory-limit=64
      networks:
        otus_hw:
          ipv4_address: 172.30.0.5

# Настроим общую сеть для контейнеров
networks:
  otus_hw:
    name: "aplekhanov_OTUS"
    ipam:
      driver: default
      config:
        - subnet: 172.30.0.0/16
          ip_range: 172.30.5.0/24
          gateway: 172.30.5.254

volumes:
    phpsocket: