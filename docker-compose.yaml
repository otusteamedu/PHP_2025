services:
  nginx_balancer:
    build:
      context: ./docker/nginx
      dockerfile: Dockerfile
    image: ${COMPOSE_PROJECT_NAME}/nginx_balancer
    container_name: ${COMPOSE_PROJECT_NAME}_${CONTAINER_NAME}_balancer
    ports:
      - "${NGINX_PORT}:80"
    volumes:
      - ./docker/nginx/upstream-web.conf:/etc/nginx/nginx.conf
    depends_on:
      - nginx_1
      - nginx_2
    networks:
      app-network:
        aliases:
          - mysite.local  # Теперь mysite.local = nginx_balancer

  nginx_1:
    build:
      context: ./docker/nginx
      dockerfile: Dockerfile
    image: ${COMPOSE_PROJECT_NAME}/nginx_1
    container_name: ${COMPOSE_PROJECT_NAME}_${CONTAINER_NAME}_1
    volumes:
      - ./:/data/mysite.local
      - ./docker/nginx/hosts/mysite.local.conf:/etc/nginx/conf.d/mysite.local.conf
    depends_on:
      - fpm_1
      - fpm_2
    networks:
      - app-network

  nginx_2:
    build:
      context: ./docker/nginx
      dockerfile: Dockerfile
    image: ${COMPOSE_PROJECT_NAME}/nginx_2
    container_name: ${COMPOSE_PROJECT_NAME}_${CONTAINER_NAME}_2
    volumes:
      - ./:/data/mysite.local
      - ./docker/nginx/hosts/mysite.local.conf:/etc/nginx/conf.d/mysite.local.conf
    depends_on:
      - fpm_1
      - fpm_2
    networks:
      - app-network

  fpm_1:
    build:
      context: ./docker/php-fpm
      dockerfile: Dockerfile
    image: ${COMPOSE_PROJECT_NAME}/fpm_1
    container_name: ${COMPOSE_PROJECT_NAME}_fpm_1
    volumes:
      - ./:/data/mysite.local
    env_file:
      - ${ENV_FILE}
    depends_on:
      - redis
    networks:
      - app-network

  fpm_2:
    build:
      context: ./docker/php-fpm
      dockerfile: Dockerfile
    image: ${COMPOSE_PROJECT_NAME}/fpm_2
    container_name: ${COMPOSE_PROJECT_NAME}_fpm_2
    volumes:
      - ./:/data/mysite.local
    env_file:
      - ${ENV_FILE}
    depends_on:
      - redis
    networks:
      - app-network

  redis:
    build:
      context: ./docker/redis
      dockerfile: Dockerfile
    image: ${COMPOSE_PROJECT_NAME}/redis
    container_name: ${COMPOSE_PROJECT_NAME}_${REDIS_CONTAINER_NAME}
    volumes:
      - ./redis_data:/data
    ports:
      - "6379:${REDIS_PORT}"
    networks:
      - app-network

  memcached:
    image: memcached:1.6.38
    container_name: ${COMPOSE_PROJECT_NAME}_${MEMCACHED_CONTAINER_NAME}
    command: [ "memcached", "-m", "64", "-p", "${MEMCACHED_PORT}", "-l", "0.0.0.0" ]
    networks:
      - app-network

  postgres:
    image: postgres:17.4
    container_name: ${COMPOSE_PROJECT_NAME}_${POSTGRES_CONTAINER_NAME}
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - ./postgres_data:/var/lib/postgresql/data
    networks:
      - app-network

  elasticsearch:
    image: elasticsearch:8.17.4
    container_name: ${COMPOSE_PROJECT_NAME}_${ELASTIC_CONTAINER_NAME}
    environment:
      - node.name=${COMPOSE_PROJECT_NAME}_es
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms2g -Xmx2g"
      - discovery.type=single-node
      - xpack.security.enabled=${ELASTIC_SECURITY}
      # curl http://localhost:9200 при security=false
      # curl -u elastic:${ELASTIC_PASSWORD} http://localhost:9200 при security=true
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - es_data:/usr/share/elasticsearch/data
    ports:
      - "9200:${ELASTIC_PORT}"
    networks:
      - app-network

  rabbitmq:
    image: rabbitmq:3-management
    container_name: ${COMPOSE_PROJECT_NAME}_${RABBITMQ_CONTAINER_NAME}
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_USER}
    ports:
      - "${RABBITMQ_PORT}:${RABBITMQ_PORT}"
      - "15672:15672"
    volumes:
      - ./docker/rabbitmq/enabled_plugins:/etc/rabbitmq/enabled_plugins
      - ./docker/rabbitmq/rabbitmq.config:/etc/rabbitmq/rabbitmq.config
    networks:
      - app-network
    healthcheck:
      test: [ "CMD", "rabbitmq-diagnostics", "check_running" ]
      interval: 10s
      timeout: 5s
      retries: 5

  consumer:
    build:
      context: ./docker/php-fpm
      dockerfile: Dockerfile
    image: ${COMPOSE_PROJECT_NAME}/fpm_consumer
    container_name: ${COMPOSE_PROJECT_NAME}_fpm_consumer
    volumes:
      - ./:/data/mysite.local
      - ./docker/supervisor/supervisord.conf:/etc/supervisor/conf.d/supervisord.conf
    entrypoint:
      - /usr/bin/supervisord
      - -n
      - -c
      - /etc/supervisor/supervisord.conf
    env_file:
      - ${ENV_FILE}
    depends_on:
      rabbitmq:
        condition: service_healthy
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  php_socket:
  redis_data:
  postgres_data:
  es_data:
